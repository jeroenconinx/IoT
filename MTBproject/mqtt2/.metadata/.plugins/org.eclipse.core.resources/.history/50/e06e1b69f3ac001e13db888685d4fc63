#include "cy_pdl.h"
#include "cyhal.h"
#include "cybsp.h"
#include "cy_retarget_io.h"

#define SERVO_MAXIMUM_ROTATION_DEGREES 270
#define SERVO_TIME_RANGE 2000
#define MINIMUM_PULSE_WIDTH 500
#define PULSE_PERIOD 20000

void servoRotate(cyhal_pwm_t *pwm_obj, int degree)
{
	float pulseWidthPerDegree = ((float)SERVO_TIME_RANGE/(float)SERVO_MAXIMUM_ROTATION_DEGREES);
	int pulseWidthPosition = (int)(pulseWidthPerDegree * degree) + MINIMUM_PULSE_WIDTH;
	cyhal_pwm_set_period(pwm_obj, PULSE_PERIOD, pulseWidthPosition);
	cyhal_pwm_start(pwm_obj);
}


int main(void)
{
    cy_rslt_t result;	//x
    cy_rslt_t result2; 	//y
    cy_rslt_t result3;	//pwm
	cyhal_adc_t adc_obj;
	cyhal_adc_channel_t adc_chan_0_obj;
	cyhal_adc_channel_t adc_chan_1_obj;
    cyhal_pwm_t pwm_obj;

    /* Initialize the device and board peripherals */
    result = cybsp_init() ;
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    __enable_irq();

    /* Initialize retarget-io to use the debug UART port */
	result = cy_retarget_io_init(CYBSP_DEBUG_UART_TX, CYBSP_DEBUG_UART_RX, CY_RETARGET_IO_BAUDRATE);
	CY_ASSERT(result == CY_RSLT_SUCCESS);

	/* ADC conversion result. */
	int adc_outx;
	int adc_outy;

	/* Initialize ADC. The ADC block which can connect to pin 10[6] is selected */
	result = cyhal_adc_init(&adc_obj, P10_3, NULL);

	// ADC configuration structure
	const cyhal_adc_config_t ADCconfig ={
		.continuous_scanning = false,
		.resolution = 12,
		.average_count = 1,
		.average_mode_flags = 0,
		.ext_vref_mv = 0,
		.vneg = CYHAL_ADC_VNEG_VREF,
		.vref = CYHAL_ADC_REF_VDDA,
		.ext_vref = NC,
		.is_bypassed = false,
		.bypass_pin = NC
	};

	// Configure to use VDD as Vref
	result = cyhal_adc_configure(&adc_obj, &ADCconfig);

	/* Initialize ADC channel, allocate channel number 0 to pin 10[6] as this is the first channel initialized */

	const cyhal_adc_channel_config_t channel_config = { .enable_averaging = false, .min_acquisition_ns = 220, .enabled = true };
	result = cyhal_adc_channel_init_diff(&adc_chan_0_obj, &adc_obj, P10_3, CYHAL_ADC_VNEG, &channel_config);
	result2 = cyhal_adc_channel_init_diff(&adc_chan_1_obj, &adc_obj, P10_4, CYHAL_ADC_VNEG, &channel_config);

    result3 = cyhal_pwm_init(&pwm_obj, CYBSP_USER_LED, NULL);
    cyhal_pwm_set_duty_cycle(&pwm_obj, 50.0, 1);
    cyhal_pwm_start(&pwm_obj);


    for (;;)
    {
    	/* Read the ADC conversion result for corresponding ADC channel. Repeat as necessary. */
//		adc_outx = cyhal_adc_read_uv(&adc_chan_0_obj);
//		adc_outy = cyhal_adc_read_uv(&adc_chan_1_obj);
//		int rotationdegree = 100;
//		servoRotate(&pwm_obj, rotationdegree);
//		int x = (adc_outx/35000)*1.075-5; //schaalt waarde naar 0 tot 100 voor 3.3V ingangssignaal
//		int y = adc_outy;
//		printf("x = %d \r\n", x);
//		cyhal_system_delay_ms(100);
    }
}
